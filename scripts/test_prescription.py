#!/usr/bin/env python3
"""
Prescription Testing Tool
Test your prescription images and see what the OCR/NER extracts
"""

import sys
import os
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from core.ocr import extract_text
from core.ner import extract_entities
from core.interactions import find_interactions
from core.rxcui import get_rxcui
import argparse

def test_prescription_file(file_path: str, show_debug: bool = True):
    """
    Test a prescription file and show detailed results
    """
    file_path = Path(file_path)
    
    if not file_path.exists():
        print(f"‚ùå File not found: {file_path}")
        return False
    
    print(f"üîç Testing Prescription: {file_path.name}")
    print("=" * 60)
    
    try:
        # Read file
        with open(file_path, 'rb') as f:
            file_bytes = f.read()
        
        # Determine file type
        file_ext = file_path.suffix.lower()
        if file_ext in ['.png', '.jpg', '.jpeg']:
            file_type = f'image/{file_ext[1:]}'
        elif file_ext == '.pdf':
            file_type = 'application/pdf'
        else:
            print(f"‚ùå Unsupported file type: {file_ext}")
            return False
        
        print(f"üìÑ File Type: {file_type}")
        print(f"üìä File Size: {len(file_bytes):,} bytes")
        print()
        
        # Step 1: OCR
        print("üîç STEP 1: OCR Text Extraction")
        print("-" * 30)
        try:
            extracted_text = extract_text(file_bytes, file_type)
            print(f"‚úÖ Extracted {len(extracted_text)} characters")
            
            if show_debug:
                print(f"\nüìÑ Extracted Text:")
                print("‚îÄ" * 20)
                print(extracted_text)
                print("‚îÄ" * 20)
            
        except Exception as e:
            print(f"‚ùå OCR failed: {e}")
            return False
        
        # Step 2: NER
        print(f"\nüíä STEP 2: Entity Recognition")
        print("-" * 30)
        try:
            entities = extract_entities(extracted_text)
            print(f"‚úÖ Found {len(entities)} drug entities")
            
            if entities:
                print("\nüìã Identified Entities:")
                for i, entity in enumerate(entities, 1):
                    drug = entity.get('drug', 'Unknown')
                    dose = entity.get('dose', 'No dose')
                    freq = entity.get('frequency', 'No frequency')
                    route = entity.get('route', 'No route')
                    print(f"  {i}. Drug: {drug}")
                    print(f"     Dose: {dose}")
                    print(f"     Frequency: {freq}")
                    print(f"     Route: {route}")
                    print()
            else:
                print("‚ö†Ô∏è  No entities found")
                print("üí° Suggestions:")
                print("   ‚Ä¢ Check if prescription contains clear drug names")
                print("   ‚Ä¢ Ensure dosages are visible (e.g., 325mg, 500mg)")
                print("   ‚Ä¢ Try a different image format or quality")
        
        except Exception as e:
            print(f"‚ùå NER failed: {e}")
            return False
        
        # Step 3: RxNorm Mapping
        if entities:
            print(f"\nüîó STEP 3: RxNorm Mapping")
            print("-" * 30)
            mapped_count = 0
            
            for entity in entities:
                drug_name = entity.get('drug')
                if drug_name:
                    try:
                        rxcui = get_rxcui(drug_name)
                        if rxcui:
                            print(f"‚úÖ {drug_name} ‚Üí RxCUI: {rxcui}")
                            entity['rxcui'] = rxcui
                            mapped_count += 1
                        else:
                            print(f"‚ùå {drug_name} ‚Üí No RxCUI found")
                    except Exception as e:
                        print(f"‚ùå {drug_name} ‚Üí Error: {e}")
            
            print(f"\nüìä Mapping Success: {mapped_count}/{len(entities)} drugs")
        
        # Step 4: Drug Interactions
        if entities:
            print(f"\n‚ö†Ô∏è  STEP 4: Drug Interaction Check")
            print("-" * 30)
            
            rxcuis = [e.get('rxcui') for e in entities if e.get('rxcui')]
            if len(rxcuis) >= 2:
                try:
                    interactions = find_interactions(rxcuis)
                    if interactions:
                        print(f"‚ö†Ô∏è  Found {len(interactions)} potential interactions:")
                        for interaction in interactions:
                            severity = interaction.get('severity', 'unknown')
                            drug_a = interaction.get('drug_a', 'Drug A')
                            drug_b = interaction.get('drug_b', 'Drug B')
                            desc = interaction.get('description', 'No description')
                            
                            severity_emoji = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üî¥'}.get(severity, '‚ö™')
                            print(f"  {severity_emoji} {drug_a} ‚Üî {drug_b} ({severity})")
                            print(f"     {desc}")
                            print()
                    else:
                        print("‚úÖ No drug interactions found")
                except Exception as e:
                    print(f"‚ùå Interaction check failed: {e}")
            else:
                print("‚ÑπÔ∏è  Need at least 2 mapped drugs to check interactions")
        
        print("\n" + "=" * 60)
        print("‚úÖ Prescription test completed!")
        
        # Summary
        print(f"\nüìà SUMMARY:")
        print(f"   OCR: {'‚úÖ Success' if extracted_text else '‚ùå Failed'}")
        print(f"   NER: {'‚úÖ Found entities' if entities else '‚ùå No entities'}")
        if entities:
            mapped = len([e for e in entities if e.get('rxcui')])
            print(f"   RxNorm: {mapped}/{len(entities)} mapped")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return False

def show_good_prescription_examples():
    """Show examples of prescription formats that work well"""
    
    print("üìã PRESCRIPTION FORMATS THAT WORK BEST")
    print("=" * 50)
    
    examples = [
        {
            "title": "Standard Hospital Format",
            "text": """
PRESCRIPTION
Patient: John Doe, Age: 45
Date: 01/15/2024

Medications:
1. Aspirin 325mg - Take twice daily with food
2. Metformin 500mg - Take twice daily with meals
3. Lisinopril 10mg - Take once daily in morning

Dr. Sarah Smith, MD
License: MD123456
            """
        },
        {
            "title": "Simple List Format", 
            "text": """
Rx:
‚Ä¢ Aspirin 325mg bid
‚Ä¢ Metformin 500mg bid with meals
‚Ä¢ Lisinopril 10mg qd

Dr. Johnson
            """
        },
        {
            "title": "Numbered Format",
            "text": """
MEDICATIONS:
1. Atorvastatin 20mg once daily at bedtime
2. Amlodipine 5mg once daily
3. Metformin 500mg twice daily with meals

Follow up in 4 weeks
            """
        }
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. {example['title']}:")
        print("-" * 25)
        print(example['text'].strip())
    
    print("\n" + "=" * 50)
    print("üí° TIPS FOR BETTER RECOGNITION:")
    print("‚úÖ Use clear, high-contrast images")
    print("‚úÖ Ensure text is straight (not tilted)")
    print("‚úÖ Include drug names, dosages, and frequencies")
    print("‚úÖ Use standard medical abbreviations")
    print("‚úÖ Avoid handwritten prescriptions if possible")
    print("‚ùå Avoid blurry or low-resolution images")
    print("‚ùå Avoid complex layouts or decorative fonts")

def main():
    """Main testing function"""
    parser = argparse.ArgumentParser(description="Test prescription OCR and NER")
    parser.add_argument("file", nargs="?", help="Prescription file to test")
    parser.add_argument("--examples", action="store_true", help="Show good prescription examples")
    parser.add_argument("--no-debug", action="store_true", help="Hide debug output")
    
    args = parser.parse_args()
    
    if args.examples:
        show_good_prescription_examples()
        return
    
    if not args.file:
        print("üß™ Prescription Testing Tool")
        print("=" * 30)
        print()
        print("Usage:")
        print("  python scripts/test_prescription.py <file>")
        print("  python scripts/test_prescription.py --examples")
        print()
        print("Examples:")
        print("  python scripts/test_prescription.py prescription.jpg")
        print("  python scripts/test_prescription.py prescription.pdf")
        print()
        return
    
    # Test the file
    success = test_prescription_file(args.file, show_debug=not args.no_debug)
    
    if not success:
        print("\nüí° Try running with --examples to see good prescription formats")

if __name__ == "__main__":
    main()